feature -> gui stats
    ^ also plug in to gui_log
        Enable the SetTimer in .Update()
        Enable auto open stats if setting is set at the end of Get()

feature -> gui about
    ^ also plug in to gui_log

bug -> this.SetIcon(ico.GetHandle()) isn't working for the gui's

todo -> different method for ignoring duplicate mobs. use the wiki_name to check if the mob was already added
    this is because for example vorkath has two different versions with different drop tables
        "wiki_name": "Vorkath (Dragon Slayer II)" quest version
        "wiki_name": "Vorkath" post-quest version
    ^ add this explanation to the code

note/bug -> Abyssal Sire has a 2 rune bars drop in the RDT and a 5 rune bar normal drop. the osrsbox drop table only has
    one rune bar entry with '5' as quantity..

bug/todo -> whenever log gui is shown also refetch the drop table so changes are taken into accoutn. for example after changing settings

bug -> gui_log -> menu open drop log file, windows doesnt open the .json for some reason

feature -> ON_WM_LBUTTONDOWN -> quantity select gui

structure -> integrate gui position code into the class. using the built in ini stuff to save position information in the same spot as the class files. or maybe in temporary folder or something
    save pos, restore pos, check correct pos

feature -> drop categories -> separate the rare drop table and the others like gem drop table from the main drop table
    ^ seems atleast by checking vorkath the rare drop table isn't included. So always include the RDT into the gui,
        either as a tab or an image that opens a separate gui
feature -> drop categories -> take max drop table variable into account
    if the drops list is above X, start adding items into categories until it is no longer above X
        ^ first get all the item category sizes to determine which to start with. start with the largest category or the one that gets the nearest below X
        this prevents item categories with very few items

feature idea -> Update ClassMobDatabase._Update() in the background so it doesn't take 20 seconds

wiki api ->
    todo -> rename ClassApiWiki to something like ClassWiki or ClassWikiScraper because it doesn't actually use the wiki api which is conflicting. it's my wiki 'api'
    feature -> (maybe a rewrite depending on how usefull this can be) Idea use the actual wiki api to improve my wiki api class
    feature -> Add the droptable category class wiki api calls inside the wiki class
    feature -> add more documentation. class/method and their parameter(s) descriptions 
        eg. its not clear what the input parameter(s) are for GetMobImage
    bug ->  getmob image can't retrieve image for spinolyp
        the wiki page infobox for this mob has 'suspicious water' preselected instead of the actual spinolyp which is probably messing the script up

testing -> log a variety of mobs with different drop tables to adjust the categories and or add additional categories

feature -> speed up item db load time? would be able to do this with an item name:id list of the items that are actually in drop tables
    ^ or sear
    wiki api = instant
    item db = 0.200
    mob db = 0.04

structure -> merge drop table categories class into the drop table class like done with the wiki api